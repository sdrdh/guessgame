#!/usr/bin/env node

/**
 * Prepare Frontend for Deployment
 *
 * This script:
 * 1. Reads CDK outputs from cdk-outputs.json
 * 2. Extracts AWS configuration values
 * 3. Writes them to frontend/.env
 * 4. Builds the frontend
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const OUTPUTS_FILE = path.join(__dirname, '../cdk-outputs.json');
const FRONTEND_DIR = path.join(__dirname, '../../frontend');
const ENV_FILE = path.join(FRONTEND_DIR, '.env');

// ANSI color codes for output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function error(message) {
  log(`ERROR: ${message}`, 'red');
  process.exit(1);
}

function main() {
  log('=== Preparing Frontend for Deployment ===\n', 'blue');

  // Step 1: Read CDK outputs
  log('üìñ Reading CDK outputs...', 'yellow');
  if (!fs.existsSync(OUTPUTS_FILE)) {
    error(`CDK outputs file not found: ${OUTPUTS_FILE}\n` +
          'Please run backend deployment first:\n' +
          '  npm run deploy:backend');
  }

  const outputs = JSON.parse(fs.readFileSync(OUTPUTS_FILE, 'utf8'));

  // Step 2: Detect environment and construct stack names
  log('üîç Detecting environment and extracting configuration...', 'yellow');

  // Try to detect environment from stack names in outputs
  const stackNames = Object.keys(outputs);
  let stackPrefix = 'GuessGame-';

  // Check if we have dev stacks (GuessGame-dev-) or prod stacks (GuessGame-)
  if (stackNames.some(name => name.includes('GuessGame-dev-'))) {
    stackPrefix = 'GuessGame-dev-';
    log('  Environment: dev', 'blue');
  } else {
    stackPrefix = 'GuessGame-';
    log('  Environment: prod', 'blue');
  }

  const authStackName = `${stackPrefix}AuthStack`;
  const apiStackName = `${stackPrefix}ApiStack`;

  const authStack = outputs[authStackName];
  const apiStack = outputs[apiStackName];

  if (!authStack || !apiStack) {
    error('Required stacks not found in outputs.\n' +
          `Expected: ${authStackName} and ${apiStackName}\n` +
          'Please ensure backend stacks are deployed.\n' +
          `Available stacks: ${stackNames.join(', ')}`);
  }

  // Extract values from outputs
  const userPoolId = authStack.UserPoolId;
  const userPoolClientId = authStack.UserPoolClientId;
  const apiUrl = apiStack.ApiUrl;

  // Extract region from userPoolId (format: region_XXXXXXXXX)
  const region = userPoolId ? userPoolId.split('_')[0] : (process.env.CDK_DEFAULT_REGION || 'us-east-1');

  if (!userPoolId || !userPoolClientId || !apiUrl) {
    error('Missing required outputs from stacks.\n' +
          `UserPoolId: ${userPoolId}\n` +
          `UserPoolClientId: ${userPoolClientId}\n` +
          `ApiUrl: ${apiUrl}`);
  }

  log(`  ‚úì User Pool ID: ${userPoolId}`, 'green');
  log(`  ‚úì Client ID: ${userPoolClientId}`, 'green');
  log(`  ‚úì API URL: ${apiUrl}`, 'green');
  log(`  ‚úì Region: ${region}`, 'green');

  // Step 3: Write .env file
  log('\nüìù Writing .env file...', 'yellow');
  const envContent = `# Auto-generated by prepare-frontend.js
# DO NOT EDIT MANUALLY - This file is generated from CDK outputs

VITE_COGNITO_USER_POOL_ID=${userPoolId}
VITE_COGNITO_USER_POOL_CLIENT_ID=${userPoolClientId}
VITE_APPSYNC_ENDPOINT=${apiUrl}
VITE_AWS_REGION=${region}
VITE_APPSYNC_REGION=${region}
`;

  fs.writeFileSync(ENV_FILE, envContent);
  log(`  ‚úì Created ${ENV_FILE}`, 'green');

  // Step 4: Install dependencies
  log('\nüì¶ Installing frontend dependencies...', 'yellow');
  try {
    execSync('npm ci', {
      cwd: FRONTEND_DIR,
      stdio: 'inherit',
    });
    log('  ‚úì Dependencies installed', 'green');
  } catch (err) {
    error('Failed to install frontend dependencies');
  }

  // Step 5: Build frontend
  log('\nüî® Building frontend...', 'yellow');
  try {
    execSync('npm run build', {
      cwd: FRONTEND_DIR,
      stdio: 'inherit',
    });
    log('  ‚úì Frontend built successfully', 'green');
  } catch (err) {
    error('Frontend build failed');
  }

  log('\n‚úÖ Frontend preparation complete!', 'green');
  log('You can now deploy the frontend stack:', 'blue');
  log('  cdk deploy GuessGameFrontendStack\n', 'blue');
}

main();
